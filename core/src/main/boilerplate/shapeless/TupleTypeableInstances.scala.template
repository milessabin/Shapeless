/*
 * Copyright (c) 2011 Miles Sabin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package shapeless

trait TupleTypeableInstances {
  import Typeable._

[#  implicit def tuple1Typeable[[#P1#]](implicit [#castP1 : Typeable[P1]#]) = new Typeable[Tuple1[[#P1#]]] {
    def cast(t : Any) : Option[Tuple1[[#P1#]]] = {
      if(t == null) Some(t.asInstanceOf[Tuple1[[#P1#]]])
      else if(t.isInstanceOf[Tuple1[[#_#]]]) {
        val p = t.asInstanceOf[Tuple1[[#_#]]]
        for([#_ <- p._1.cast[P1]#;]) yield t.asInstanceOf[Tuple1[[#P1#]]]
      } else None
    }
  }#

]
}
